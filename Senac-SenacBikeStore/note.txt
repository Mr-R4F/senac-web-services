muito utilizado no mercado
muito usado no mercado CRUD OU dml
ASSOCIADO A MÉTODOS NO LARAVEL
criar bando (será USADO PARA TODOS OS TRABALHOS)
BASEADO E commerce
canvas para organização

php artisan make:resource -> como se fosse uma view da api
php artisan make:controller Api\CategoriaController --model=Categoria
cria um controler a partir da tabela automaticamente todas as tabelas são CRUD
viu métdo pro métod e associou
request -> faz validação insere recurso
php artisan make:request StoreCategoriaRequest

versões
começo meio e fim
garantir que o softwaRE esteja vivo
pessoas que garantem que o software tenha um ciclo de vida
manutenção é essencial para garantir o web service
criar documentação para o web service + versionamento
criar um padrão básico de documentação
padrão bascio para escrever a documentação para ser bem consumida
versionamento
se o codigo evolui de acordo com o tempo versionar
notificar
pode-se criar quebras se não notificadas as modificações
mudanças repentinas podem quebrar os sistema
aplicar versionamento o ideal
uri -> versões
ponto critico em querys (tratamento requerido)
pode-se assumir default (mais nova)
ideal para mais compactadas muito grandes não é o ideal
por header http
pode-se colocar no swagger
pode-se customizar o deixando mais poderoso
inclusive servidores/ versões
---
muito utilizado no mercado
muito usado no mercado CRUD OU dml
ASSOCIADO A MÉTODOS NO LARAVEL
criar bando (será USADO PARA TODOS OS TRABALHOS)
BASEADO E commerce
canvas para organização

php artisan make:resource -> como se fosse uma view da api
php artisan make:controller Api\CategoriaController --model=Categoria
cria um controler a partir da tabela automaticamente todas as tabelas são CRUD
viu métdo pro métod e associou
request -> faz validação insere recurso
php artisan make:request StoreCategoriaRequest

versões
começo meio e fim
garantir que o softwaRE esteja vivo
pessoas que garantem que o software tenha um ciclo de vida
manutenção é essencial para garantir o web service
criar documentação para o web service + versionamento
criar um padrão básico de documentação
padrão bascio para escrever a documentação para ser bem consumida
versionamento
se o codigo evolui de acordo com o tempo versionar
notificar
pode-se criar quebras se não notificadas as modificações
mudanças repentinas podem quebrar os sistema
aplicar versionamento o ideal
uri -> versões
ponto critico em querys (tratamento requerido)
pode-se assumir default (mais nova)
ideal para mais compactadas muito grandes não é o ideal
por header http
pode-se colocar no swagger
pode-se customizar o deixando mais poderoso
inclusive servidores/ versões


hosting e containers
docker -> 
hosting
evoulução/construção/implementação/construção do software
containers -> roda o código dentro de um server 'pequeno'
evoulução do hosing da aplicações
cmm fases 
ideai de facilidade de construção de software
duas areas que trabalham juntas para fazer agilidade
stack /frameworks/requisitos -> recursos necessarios para a aplicação funcionar
xerox ->cria o conceito de GUI
steve jobs cria o conceito de pcs
depende-se de recursos para o funcionamento da aplicação
hypervisor -> entidade que pega o hardware e virtualização, criando uma falsa percepção de que o server é unico
vmware - ibm
hyper-v - dá ms
container -> agora tira o SO
a aplicação roda em uma 'caixa' mais leve consumindo menos recursos (máq virtual super pequena)
sem necessidade de overhead
permite instalar em outras maquinas sem precisar instalar tudo, proque ? pq precisa de velocidade.
empactoar ws + framework => imagem / container 
para fazer imagem precisa de um 'manifesto' que ensina o docker como criar essa imagem ('receita' de bolo de como montar imagem)
imagens container são baseadas em linux
porta interna 9só o container vê
imagens -> tempalte
container _. template em execução
 . vê no diretorio que está o projeto..
possui o manifesto com as infos, assim dá para rodar em qualquer máquina
dá para fazer qualquer modificação e manda fazer uma nova imagem
mais ágil pois se cria uma nova versão da mesma imagem
com muitas imagens fica dificil de orquestrar (organizar)
quando mais trabalho mais dificil
surge o kurbenetes
quando mais aplicação
registry -hospeda as imagens
faz upload para ambiente kurnenetes
anatomia -
plaining -codigo que orquestra os nodes (locais de hospedagem de container) (entidade que controla isso)
maquina virtual (nodes)
gerenciado de máquinas virtuais
loadBalancer -vai mandando as reqs para as máquinas disponiveis
balanceia carga de trabalho

22/05
cloud compunting 
hosting

nuvem ncessáio modelo de hosting para 'esticar' a demanda 
user realamente o que precisaprincipis serviçoes de nuvem
nist padronizou a caomp e m nuvem
padronizou na versão de cubo
para ser considerado um servico de serviceis para
mias tecnico e mais usuário
plataforma - >desenvolve - gmail .exe
infraestrutura - hardware .. -> db na nuvem
software -> mais perto do usuário -> maq virtual
modelo de pilha
onde disponibilizar ?
comp em nuvem permite criar varios outros serviçoes
rocura uma área do serve para criar o serve
actions -> ci /cd

29/05
indo além
11 milhoes
tecnologias se conrecitzam rápido
aumento de consumindo
crescimento do disponibilizar salto da covid
forma liquida
ideias liquidas

padroes de codigo
evolução da tecnologia para se adequar ao mundo liquido
entender o mundo liquido
devops
separara de quem desenvolve de quem opera
evitar problemas
devops -> capacidade de desenvolver junto a um ciclo
planeja, produção, feedbacks.
relação entre as partes
integração que passam por um processo
buscar equilibrio entre tecnologia e cultura (conjunto de desisões que se tomam no dia)
peter ducker -> cultura como estrategia nocafe da manha
esteira de produção (como uma máquina)
consrtuir as ferramentas
necessário processos
CI -> integra o processo de dev em teste(faz e integra)
publica e já vincula por exemp
CD -.faz compila e produção
entrregou a produção e deploy
processo de pessoas, ferramntas e processos

microsserviços
para criar o serviços
não consegue trabalha com atomicidade de serviçoes
fragmentar a melhor opção (docker ou semelhante)
tudo em serviços , há uma separação para caso de algum problema
maneira de ver o mundo a sistemas distribuidoscom sistemas idependentes e quese comunicam através de APIs
autonomo ou especializado(especifico em algo)
serverless _. sem estado
hospedagem sem configura o server
preocpa só com o codigo
ou função ou hospeda em app web

no azure complia faz zip e desfaz
lambda funcção exportador por web service
nuvem -> liberar da preocupação de serve
não tem preocupação.